// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fixture with plugin transforms 1`] = `
"\\"use strict\\";
var _reactNativeReanimated = _interopRequireWildcard(require(\\"react-native-reanimated\\"));
function _getRequireWildcardCache() {
    if (typeof WeakMap !== \\"function\\") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function() {
        return cache;
    };
    return cache;
}
function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== \\"object\\" && typeof obj !== \\"function\\") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function Box() {
    const offset = (0, _reactNativeReanimated).useSharedValue(0);
    const animatedStyles = (0, _reactNativeReanimated.useAnimatedStyle)(function () {
        var _f = function _f() {
        return {
            transform: [{
            translateX: offset.value * 255
            }]
        };
        };

        _f._closure = {
        offset: offset
        };
        _f.asString = \\"function _f(){const{offset}=jsThis._closure;{return{transform:[{translateX:offset.value*255}]};}}\\";
        _f.__workletHash = 7114514849439;
        _f.__location = \\"${ process.cwd() }/jest tests fixture (10:48)\\";
        _f.__optimalization = 3;
        return _f;
    }());
    return /*#__PURE__*/ React.createElement(React.Fragment, null, /*#__PURE__*/ React.createElement(_reactNativeReanimated.default.View, {
        style: [
            styles.box,
            animatedStyles
        ]
    }), /*#__PURE__*/ React.createElement(Button, {
        onPress: ()=>offset.value = Math.random(),
        title: \\"Move\\"
    }));
}
"
`;
